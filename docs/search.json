[
  {
    "objectID": "setup/mac-setup.html",
    "href": "setup/mac-setup.html",
    "title": "Mac OS Setup",
    "section": "",
    "text": "Part II: Shell\n\nEnsure you are using bash instead of zsh. Newer macOS versions come with zsh as the default. We will switch it back to bash.\n\nCheck if you are on bash by opening the Terminal and run: echo \"$SHELL\". If the result ends with “zsh”, continue to the next step.\nRun brew install bash to get the latest bash.\nRun sudo subl /etc/shells file add /usr/local/bin/bash as the last line of the file.\nRun chsh -s /usr/local/bin/bash to switch the default shell back to bash. It will prompt you for the password which you can type in and press enter.\nRun touch ~/.bash_profile create the bash profile.\nRun subl ~/.bash_profile to open up the bash profile in Sublime Text.\n\nPaste the following snippet at the end of the file and save.\n# add colors\nalias ls='ls -G'\nexport CLICOLOR=1\nexport LSCOLORS=GxFxCxDxBxegedabagaced   \n\n# set EDITOR as sublime text\nexport EDITOR=\"subl --wait\"\n\n# Define a function that returns your current git branch\nparse_git_branch() {\n git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# Display present working directory and git path in bash prompt with colors\nexport PS1=\"\\u \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\nClose and reopen the terminal to see the changes.\n\n\n\nPart III: Git Setup\n\nConfigure git with your name and email address. Be sure to use the same email associated with your Github account.\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\n\n\n\nPart IV: SSH\nIn order to write code locally on our computer and be able to push to GitHub (or pull from GitHub) daily without constantly having to enter a username and password each time, we’re going to set up SSH keys.\n\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access.\nThe cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.\nsource: https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html\n\nThe following steps are a simplification of the steps found in GitHub’s documentation. If you prefer, feel free to follow the steps at that link. Otherwise, for a simplified experience continue on below!\n\nSimplified Setup Steps\n\nStep 1: Check to see if you already have keys.\nRun the following command.\nls -al ~/.ssh/\nIf you see any output, that probably means you already have a public and private SSH key. If you have keys, you will most likely you will have two files, one named id_rsa (that contains your private key) and id_rsa.pub (that contains your public key).\nsidenote: Those files may also be named something like: id_ecdsa.pub or id_ed25519.pub. That just means you’re using a different encryption algorithm to generate your keys. You can learn more about that here if you chose to. Or, don’t worry about it and power on!\nIf you already have keys, continue to step 3. Otherwise, read on!\nStep 2: Create new SSH keys.\nRun the following comamnd, but makes sure to replace your_email@example.com with your own email address. Use the same email address you used to sign up to GitHub with.\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nYou may then see a prompt like the one below. Just hit enter to save the key in the default location.\nEnter file in which to save the key (/Users/jacob/.ssh/id_rsa):\nAfter that, the system will prompt you to enter a passphrase. We’re not going to use a passphrase here, so just go ahead and leave that blank and hit enter twice.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nFinally you should see some randomart that looks like this\nYour identification has been saved in /Users/jacob/.ssh/id_rsa.\nYour public key has been saved in /Users/jacob/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:2AazdvCBP8d1li9tF8cszM2KbtjPe7iwfCK8gUgzIGY your_email@example.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n|       .     o * |\n|  E . = .   . B.*|\n| o . . X o . + =o|\n|      B S o . o =|\n|     o * + +   o.|\n|      . ..o =  . |\n|          o+.=o .|\n|          .ooo=+ |\n+----[SHA256]-----+\nStep 3: Add your key to GitHub\nRun the following command to view your public key\ncat ~/.ssh/id_rsa.pub\nNavigate to https://github.com/settings/keys and hit “New SSH key”. Paste the SSH key from the last command into the text box as shown below and then hit “Add SSH key”. Make sure you copy paste exactly. The key will likely start with ssh_rsa and end with your email address. You can give the key a title like “My Macbook Pro” so you know which computer this key comes from.\n\nStep 4: Verify that it worked!\nRun the following command to test your computer’s SSH connection to GitHub\nssh -T git@github.com\nIf the connection is successful, you will see a message like this\n> Hi username! You've successfully authenticated, but GitHub does not\n> provide shell access.\n\n\n\nRecap: What did we just do?\nWe just created a public/private SSH Key pair. There is now a folder on your computer called .ssh (it is a hidden folder, hidden folders have names that start with .). You can run this command to see the files in that folder.\nls -al ~/.ssh/\nid_rsa.pub contains your public key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa.pub\nid_rsa contains your private key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa\nThis public and private key pair are mathematically linked. As the name suggests, you can share your public key far and wide, but must keep your private key safe and secure. Since you have shared your public key with GitHub, your computer can encrypt files with your private key and send them to GitHub. Since GitHub has your public key, it can match that file and verify that it is coming from you. Your computer can now securely communicate with GitHub without needing a username and password every time."
  },
  {
    "objectID": "setup/windows-setup.html",
    "href": "setup/windows-setup.html",
    "title": "Windows Setup",
    "section": "",
    "text": "Part II: Shell\n\nRun subl ~/.bashrc to open the bash profile in Sublime Text.\nPaste the following snippet at the end of the file and save.\n# set EDITOR as sublime text\nexport EDITOR=\"subl --wait\"\n\n# Define a function that returns your current git branch\nparse_git_branch() {\n git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# Display present working directory and git path in bash prompt with colors\nexport PS1=\"\\u \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\nClose and reopen the terminal to see the changes.\n\n\n\nPart III: Git Setup\n\nConfigure git with your name and email address. Be sure to use the same email associated with your Github account.\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\n\n\n\nPart IV: SSH\nIn order to write code locally on our computer and be able to push to GitHub (or pull from GitHub) daily without constantly having to enter a username and password each time, we’re going to set up SSH keys.\n\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access.\nThe cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.\nsource: https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html\n\nThe following steps are a simplification of the steps found in GitHub’s documentation. If you prefer, feel free to follow the steps at that link. Otherwise, for a simplified experience continue on below!\n\nSimplified Setup Steps\n\nStep 1: Check to see if you already have keys.\nRun the following command.\nls -al ~/.ssh/\nIf you see any output, that probably means you already have a public and private SSH key. If you have keys, you will most likely you will have two files, one named id_rsa (that contains your private key) and id_rsa.pub (that contains your public key).\nsidenote: Those files may also be named something like: id_ecdsa.pub or id_ed25519.pub. That just means you’re using a different encryption algorithm to generate your keys. You can learn more about that here if you chose to. Or, don’t worry about it and power on!\nIf you already have keys, continue to step 3. Otherwise, read on!\nStep 2: Create new SSH keys.\nRun the following comamnd, but makes sure to replace your_email@example.com with your own email address. Use the same email address you used to sign up to GitHub with.\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nYou may then see a prompt like the one below. Just hit enter to save the key in the default location.\nEnter file in which to save the key (/Users/jacob/.ssh/id_rsa):\nAfter that, the system will prompt you to enter a passphrase. We’re not going to use a passphrase here, so just go ahead and leave that blank and hit enter twice.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nFinally you should see some randomart that looks like this\nYour identification has been saved in /Users/jacob/.ssh/id_rsa.\nYour public key has been saved in /Users/jacob/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:2AazdvCBP8d1li9tF8cszM2KbtjPe7iwfCK8gUgzIGY your_email@example.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n|       .     o * |\n|  E . = .   . B.*|\n| o . . X o . + =o|\n|      B S o . o =|\n|     o * + +   o.|\n|      . ..o =  . |\n|          o+.=o .|\n|          .ooo=+ |\n+----[SHA256]-----+\nStep 3: Add your key to GitHub\nRun the following command to view your public key\ncat ~/.ssh/id_rsa.pub\nNavigate to https://github.com/settings/keys and hit “New SSH key”. Paste the SSH key from the last command into the text box as shown below and then hit “Add SSH key”. Make sure you copy paste exactly. The key will likely start with ssh_rsa and end with your email address. You can give the key a title like “My Macbook Pro” so you know which computer this key comes from.\n\nStep 4: Verify that it worked!\nRun the following command to test your computer’s SSH connection to GitHub\nssh -T git@github.com\nIf the connection is successful, you will see a message like this\n> Hi username! You've successfully authenticated, but GitHub does not\n> provide shell access.\n\n\n\nRecap: What did we just do?\nWe just created a public/private SSH Key pair. There is now a folder on your computer called .ssh (it is a hidden folder, hidden folders have names that start with .). You can run this command to see the files in that folder.\nls -al ~/.ssh/\nid_rsa.pub contains your public key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa.pub\nid_rsa contains your private key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa\nThis public and private key pair are mathematically linked. As the name suggests, you can share your public key far and wide, but must keep your private key safe and secure. Since you have shared your public key with GitHub, your computer can encrypt files with your private key and send them to GitHub. Since GitHub has your public key, it can match that file and verify that it is coming from you. Your computer can now securely communicate with GitHub without needing a username and password every time."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Foundations for Policy Analysis: Programming and Reproducible Methods",
    "section": "",
    "text": "This page contains an outline of the topics, content, and assignments for the course.\n\n\n\n\n\n\n\n\nLesson\nTopic\nDescription\n\n\n\n\n1\nGit/GitHub\nWe will cover Git and GitHub basics from the command line, branching, merging, and forking"
  },
  {
    "objectID": "lessons/git_github/git_github.html",
    "href": "lessons/git_github/git_github.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "Git (/ɡɪt/[8]) is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for source code management in software development,[9] but it can be used to keep track of changes in any set of files. As a distributed revision control system it is aimed at speed,[10] data integrity,[11] and support for distributed, non-linear workflows.[12] -Wikipedia\n\n\nGit is an open source program for tracking changes in text files. -GitHub (https://help.github.com/articles/github-glossary/)\n\n\n\nKeeping track of file versions is hard.\n\n\n\nAbove all else, Git is a fast and distributed version control system, that allows you to efficiently handle projects large and small.\nHere are some problems we face as developers, and how git solves them:\n\n\nGit allows us to make save points at any time. These save points are called ‘commits’. Once a save point is made, it’s permanent, and allows us to go back to that save point at any time. From there, we can see what the code looked like at that point, or even start building off that version.\n\n\n\n\nEvery commit has a description (commit message), which allows us to describe what changes were made between the current and previous commit. This is usually a description of what features were added or what bugs were fixed.\nAdditionally, git supports tagging, which allows us to mark a specific commit as a specific version of our code (e.g. ‘2.4.5’).\n\n\n\n\nIt’s often important to see content of the actual changes that were made. This can be useful when:\n\ntracking down when and how a bug was introduced\nunderstanding the changes a team member made so you can stay up-to-date with progress\nreviewing code as a team for correctness or quality/style\n\nGit allows us to easily see these changes (called a diff) for any given commit.\n\n\n\nGit enables you to work using a non-linear workflow. This means that you can have multiple versions of a project or “branches” with different save points, or “commits”, simultaneously within the same folder and easily toggle bgttween them. You can split new branches off a project when you’re looking to experiment or implement a new feature, and you can merge those branches back into the main (formerly known as “master”) branch when you’re ready to incorporate them into a project.\n\n\n\n\nIn developing software, we often want to experiment in adding a feature or refactoring (rewriting) existing code. Because git makes it easy to go back to a known good state, we can experiment without worrying that we’ll be unable to undo the experimental work.\n\n\n\n\n\n\nGit is a distributed version control system. It is a technology.\n\nGitHub is a social coding platform where git repositories are stored and where people can collaborate on projects. GitHub is great both for collaboration within your organization, but also provides an excellent model for open source collaboration across organizations or with the public. We do both of these here at FiveThirtyEight.\n\nOn GitHub you can find Git repositories.\n\n\nLearn More: https://jahya.net/blog/git-vs-github/\n\n\n\nThe basics:\n\nGit - version control software\nRepository - a folder containing your files and also containing a structure that helps keep track of changes in those files. When you intialize a repository, git creates a hidden folder (.git folder) that stores the changes to those files.\nCommit - the basic unit of a git repository is a commit. It is a set of changes to a file. A commit usually comes with an id as well as a commit message that describes the change.\n\nWorking with others:\n\nGitHub - a place to host git repositories and collaborate\nLocal Repository - the version of a git repository on your local computer\nRemote Repository - the version of a git repository stored somewhere else that your local repository is connected to (frequently on GitHub)"
  },
  {
    "objectID": "lessons/git_github/git_github.2.html",
    "href": "lessons/git_github/git_github.2.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "GitHub is a place for:\n\nStoring and viewing your Git repositories\nCollaborating on coding projects within an organization\nOpen Source Collboration: People in other organizations or complete strangers can see your code and participate with you on your project. They can suggest fixes, point out errors, and start discussions. You can find other people’s work, and make sure you’re not duplicating something that already exists. Or you can interact with someone who has already worked on something similar to what you’re trying to tackle.\nWeb Hosting: The “Github Pages” feature allows you to host a static website for free, right on GitHub.\n\nOther Uses\n\nA place to store code\nA place to store data\nA place for discussion about data and code\nA place for open source collaboration on projects\nA place for collaboration within an organization\nA place to find people working on the same things you are\nA place to find sources / people with expertise in a particular dataset\nA place to find other digital tools (scrapers, file converters, etc) \nA place to find open source work and analysis\nA portfolio of your technical work (or technical learning)\n\n\n\nVocab\n\nlocal repository a folder stored on your computer\nremote repository a folder stored on on GitHub\n\nLets take a look at a repository that is on GitHub.\n\nhttps://github.com/code4policy/simple-website\n\n\n\n\n\n\nGithub looks for a “readme” file and renders it as you’re navigating through the file structure. This is a great way to guide people through your code.\n\nReadme files are often given the .md extension, meaning they’re written in a language called markdown that allows for nicer formatting. You can check out this markdown cheet sheet (https://www.markdownguide.org/cheat-sheet/) if you want to see how formatting works, but you can also save a readme files as plain text. Github will also detect .txt files, or you can just write plain text inside your .md file.\n\n\n\n\nVocab\n\ncommit - the basic unit of a git repository is a commit. It is a set of changes to a file. A commit usually comes with an commit id as well as a commit message that describes the change.\ncommit log (aka Git History) - all of the commits (previous changes) to all of the files in your repository\n\n https://github.com/dmil/my-simple-website/commits/master\n\n\n\n\n\nRaw - actual contents of the file without any formatting applied.\n\nexample: https://github.com/fivethirtyeight/chartbuilder-2/blob/master/src/styles/core.scss\n\nHistory - every change ever made to that file within this branch.\n\nexample: https://github.com/fivethirtyeight/chartbuilder-2/commits/master/src/styles/core.scss\n\nBlame - provenance of each line currently in the file you’ree looking at in the branch you’re looking at\n\nexample: https://github.com/fivethirtyeight/chartbuilder-2/blame/master/src/styles/core.scss\n\n\n\n\n\n\n\n\n\n\n\n\nYou can edit a file in GitHub in a new branch, thus proposing a change without actually making the change in the master branch. Just make sure to leave a meaningful description of the change you made in the commit message.\n\n\n\n\n\n\n\n\nCollaborators can push to the repository without asking your permission, they have full read and write access.\n\nIf I wasn’t a collaborator, I could still work with you on an open source project through a process called forking where I can make a copy of your repository in my GitHub account, make changes, and request that you merge them back into your project. We will discuss forking more in depth later.\n\n\n\nGitHub is also great for serving up static websites. Right now, you have the code for your website on GitHub, but its not being served up anywhere. GitHub is only storing the code. Luckily, if your code happens to be a website, GitHub can also host it for you through a feature called “GitHub Pages”.\nSimply go to the “settings” menu, scroll down to “GitHub Pages”, and select “master branch”\n\nWhatever is in your master branch on GitHub should now appear at\nhttp://your-username.github.io/repository-name\nin my case it is http://dmil.github.io/my-simple-website\n\n\n\n\n\nAuditing system for changes on a file\nFor collaboratively editing a text document\nFor drafting government web design standards!\nOpen comment period for policy\nDrafting and collaborating on legal documents\nDesign (image diff)\n\nhttps://help.github.com/articles/rendering-and-diffing-images/\n\nOpen journalsim showcase\n\nhttps://github.com/showcases/open-journalism\n\nGithub for Government\n\nhttps://government.github.com/\nhttps://government.github.com/community/\n\n\nNext Page (Using Git Locally)"
  },
  {
    "objectID": "lessons/git_github/git_github.1.html",
    "href": "lessons/git_github/git_github.1.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "Git (/ɡɪt/[8]) is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for source code management in software development,[9] but it can be used to keep track of changes in any set of files. As a distributed revision control system it is aimed at speed,[10] data integrity,[11] and support for distributed, non-linear workflows.[12] -Wikipedia\n\n\nGit is an open source program for tracking changes in text files. -GitHub (https://help.github.com/articles/github-glossary/)\n\n\n\nKeeping track of file versions is hard.\n\n\n\nAbove all else, Git is a fast and distributed version control system, that allows you to efficiently handle projects large and small.\nHere are some problems we face as developers, and how git solves them:\n\n\nGit allows us to make save points at any time. These save points are called ‘commits’. Once a save point is made, it’s permanent, and allows us to go back to that save point at any time. From there, we can see what the code looked like at that point, or even start building off that version.\n\n\n\n\nEvery commit has a description (commit message), which allows us to describe what changes were made between the current and previous commit. This is usually a description of what features were added or what bugs were fixed.\nAdditionally, git supports tagging, which allows us to mark a specific commit as a specific version of our code (e.g. ‘2.4.5’).\n\n\n\n\nIt’s often important to see content of the actual changes that were made. This can be useful when:\n\ntracking down when and how a bug was introduced\nunderstanding the changes a team member made so you can stay up-to-date with progress\nreviewing code as a team for correctness or quality/style\n\nGit allows us to easily see these changes (called a diff) for any given commit.\n\n\n\nGit enables you to work using a non-linear workflow. This means that you can have multiple versions of a project or “branches” with different save points, or “commits”, simultaneously within the same folder and easily toggle bgttween them. You can split new branches off a project when you’re looking to experiment or implement a new feature, and you can merge those branches back into the main (formerly known as “master”) branch when you’re ready to incorporate them into a project.\n\n\n\n\nIn developing software, we often want to experiment in adding a feature or refactoring (rewriting) existing code. Because git makes it easy to go back to a known good state, we can experiment without worrying that we’ll be unable to undo the experimental work.\n\n\n\n\n\n\nGit is a distributed version control system. It is a technology.\n\nGitHub is a social coding platform where git repositories are stored and where people can collaborate on projects. GitHub is great both for collaboration within your organization, but also provides an excellent model for open source collaboration across organizations or with the public. We do both of these here at FiveThirtyEight.\n\nOn GitHub you can find Git repositories.\n\n\nLearn More: https://jahya.net/blog/git-vs-github/\n\n\n\nThe basics:\n\nGit - version control software\nRepository - a folder containing your files and also containing a structure that helps keep track of changes in those files. When you intialize a repository, git creates a hidden folder (.git folder) that stores the changes to those files.\nCommit - the basic unit of a git repository is a commit. It is a set of changes to a file. A commit usually comes with an id as well as a commit message that describes the change.\n\nWorking with others:\n\nGitHub - a place to host git repositories and collaborate\nLocal Repository - the version of a git repository on your local computer\nRemote Repository - the version of a git repository stored somewhere else that your local repository is connected to (frequently on GitHub)\n\nNext Page (GitHub Introduction)"
  },
  {
    "objectID": "lessons/git_github/git_github.3.html",
    "href": "lessons/git_github/git_github.3.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "Now let’s learn how to use Git locally from our computer. While there are GUIs (graphical user interfaces) for Git on your computer like GitHub Desktop, we’re going to use the command line to learn Git. That’s because this is a key transferrable skill that applies to any kind of coding.\n\n\nLearning objective: Build a “mental model” of what your computer is doing.\n\n\n\n\nGit - version control software\nRepository - a folder containing your files and also containing a structure that helps keep track of changes in those files. When you intialize a repository, git creates a hidden folder (.git folder) that stores the changes to those files.\nGitHub - a place to host git repositories and collaborate\nLocal Repository - the version of a git repository on your local computer\nRemote Repository - the version of a git repository stored somewhere else that your local repository is connected to (frequently on GitHub)\nCommit - the basic unit of a git repository is a commit. It is a set of changes to a file. A commit usually comes with an id as well as a commit message that describes the change.\n\nWithin a Repository you have\n\nUntracked Changes - files that are in your folder but that git doesn’t pay attention to.\nStaging Area - a place where you can put files before you commit them. Once files are in the staging area, git is paying attention to them.\nCommit Log (aka Git History) - all of the commits (previous changes) to all of the files in your repository.\n\n\n\n\n\n\nThe working directory\n\n\ngit init creates a git repo inside current working directory. This means that this command can turn a regular folder into a git repository by generating a hidden .git folder that starts to keep track of changes.\ngit clone takes a git repo from somewhere else and makes a copy of that repo into your current working directory. We will frequently be cloning repos from GitHub.\n\n\nThe staging area\n\n\ngit add . adds changes from the working directory to the staging area\ngit add <filename> adds changes to filenames specified from the working directory to the staging area\n\n\nThe commit\n\n\ngit commit -m \"commit message\" adds changes in staging area to the repository\ngit log shows\n\nProtip: Run git status after each command in the beginning because it allows you to visualize what just happaned.\n\n\n\n\n\n\ngithub - a service that hosts git remote repositories, and provides a web app to interact / collaborate on them\nremote - another repository that can be syncronized with a remote\nupstream - the name for a remote read-only repository\norigin - the name for a remote read-and-write repository\nclone - download an entire remote repository, to be used as a local repository\nfetch - downloading the set of changes (commits) from a remote repository\npull - fetching changes and merging them into the current branch\n\n\nIn order to show your remotes, you can run git remote -v show. The default remote is named “origin”\nIn order to push, you run git push. By default this will push from the branch you are on to a remote branch with the same name. (If you’d like to specify a branch, you can do that. The full formulation of this command is git push <remote> <branch>. So, for example you might say git push origin main to push to the “main” branch of the “origin” remote.)\n\n\n\n\n\nLet’s give it a try! We’re going to clone a repository for a simple R script from GitHub down to our computer where we can work with it locally. We will make some edits to the code, commit those changes and then push the changes back up to the remote repository in GitHub.\n\n\n\nhttps://github.com/PolicyCompFoundations/simple-rscript\n\n\nNext Page (Git from the Command Line)"
  }
]