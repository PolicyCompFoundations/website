[
  {
    "objectID": "mac-setup.html",
    "href": "mac-setup.html",
    "title": "Mac OS Setup",
    "section": "",
    "text": "Part II: Shell\n\nEnsure you are using bash instead of zsh. Newer macOS versions come with zsh as the default. We will switch it back to bash.\n\nCheck if you are on bash by opening the Terminal and run: echo \"$SHELL\". If the result ends with “zsh”, continue to the next step.\nRun brew install bash to get the latest bash.\nRun sudo subl /etc/shells file add /usr/local/bin/bash as the last line of the file.\nRun chsh -s /usr/local/bin/bash to switch the default shell back to bash. It will prompt you for the password which you can type in and press enter.\nRun touch ~/.bash_profile create the bash profile.\nRun subl ~/.bash_profile to open up the bash profile in Sublime Text.\n\nPaste the following snippet at the end of the file and save.\n# add colors\nalias ls='ls -G'\nexport CLICOLOR=1\nexport LSCOLORS=GxFxCxDxBxegedabagaced   \n\n# set EDITOR as sublime text\nexport EDITOR=\"subl --wait\"\n\n# Define a function that returns your current git branch\nparse_git_branch() {\n git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# Display present working directory and git path in bash prompt with colors\nexport PS1=\"\\u \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\nClose and reopen the terminal to see the changes.\n\n\n\nPart III: Git Setup\n\nConfigure git with your name and email address. Be sure to use the same email associated with your Github account.\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\n\n\n\nPart IV: SSH\nIn order to write code locally on our computer and be able to push to GitHub (or pull from GitHub) daily without constantly having to enter a username and password each time, we’re going to set up SSH keys.\n\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access.\nThe cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.\nsource: https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html\n\nThe following steps are a simplification of the steps found in GitHub’s documentation. If you prefer, feel free to follow the steps at that link. Otherwise, for a simplified experience continue on below!\n\nSimplified Setup Steps\n\nStep 1: Check to see if you already have keys.\nRun the following command.\nls -al ~/.ssh/\nIf you see any output, that probably means you already have a public and private SSH key. If you have keys, you will most likely you will have two files, one named id_rsa (that contains your private key) and id_rsa.pub (that contains your public key).\nsidenote: Those files may also be named something like: id_ecdsa.pub or id_ed25519.pub. That just means you’re using a different encryption algorithm to generate your keys. You can learn more about that here if you chose to. Or, don’t worry about it and power on!\nIf you already have keys, continue to step 3. Otherwise, read on!\nStep 2: Create new SSH keys.\nRun the following comamnd, but makes sure to replace your_email@example.com with your own email address. Use the same email address you used to sign up to GitHub with.\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nYou may then see a prompt like the one below. Just hit enter to save the key in the default location.\nEnter file in which to save the key (/Users/jacob/.ssh/id_rsa):\nAfter that, the system will prompt you to enter a passphrase. We’re not going to use a passphrase here, so just go ahead and leave that blank and hit enter twice.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nFinally you should see some randomart that looks like this\nYour identification has been saved in /Users/jacob/.ssh/id_rsa.\nYour public key has been saved in /Users/jacob/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:2AazdvCBP8d1li9tF8cszM2KbtjPe7iwfCK8gUgzIGY your_email@example.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n|       .     o * |\n|  E . = .   . B.*|\n| o . . X o . + =o|\n|      B S o . o =|\n|     o * + +   o.|\n|      . ..o =  . |\n|          o+.=o .|\n|          .ooo=+ |\n+----[SHA256]-----+\nStep 3: Add your key to GitHub\nRun the following command to view your public key\ncat ~/.ssh/id_rsa.pub\nNavigate to https://github.com/settings/keys and hit “New SSH key”. Paste the SSH key from the last command into the text box as shown below and then hit “Add SSH key”. Make sure you copy paste exactly. The key will likely start with ssh_rsa and end with your email address. You can give the key a title like “My Macbook Pro” so you know which computer this key comes from.\n\nStep 4: Verify that it worked!\nRun the following command to test your computer’s SSH connection to GitHub\nssh -T git@github.com\nIf the connection is successful, you will see a message like this\n> Hi username! You've successfully authenticated, but GitHub does not\n> provide shell access.\n\n\n\nRecap: What did we just do?\nWe just created a public/private SSH Key pair. There is now a folder on your computer called .ssh (it is a hidden folder, hidden folders have names that start with .). You can run this command to see the files in that folder.\nls -al ~/.ssh/\nid_rsa.pub contains your public key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa.pub\nid_rsa contains your private key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa\nThis public and private key pair are mathematically linked. As the name suggests, you can share your public key far and wide, but must keep your private key safe and secure. Since you have shared your public key with GitHub, your computer can encrypt files with your private key and send them to GitHub. Since GitHub has your public key, it can match that file and verify that it is coming from you. Your computer can now securely communicate with GitHub without needing a username and password every time."
  },
  {
    "objectID": "windows-setup.html",
    "href": "windows-setup.html",
    "title": "Windows Setup",
    "section": "",
    "text": "Part II: Shell\n\nRun subl ~/.bashrc to open the bash profile in Sublime Text.\nPaste the following snippet at the end of the file and save.\n# set EDITOR as sublime text\nexport EDITOR=\"subl --wait\"\n\n# Define a function that returns your current git branch\nparse_git_branch() {\n git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# Display present working directory and git path in bash prompt with colors\nexport PS1=\"\\u \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\nClose and reopen the terminal to see the changes.\n\n\n\nPart III: Git Setup\n\nConfigure git with your name and email address. Be sure to use the same email associated with your Github account.\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\n\n\n\nPart IV: SSH\nIn order to write code locally on our computer and be able to push to GitHub (or pull from GitHub) daily without constantly having to enter a username and password each time, we’re going to set up SSH keys.\n\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access.\nThe cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.\nsource: https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html\n\nThe following steps are a simplification of the steps found in GitHub’s documentation. If you prefer, feel free to follow the steps at that link. Otherwise, for a simplified experience continue on below!\n\nSimplified Setup Steps\n\nStep 1: Check to see if you already have keys.\nRun the following command.\nls -al ~/.ssh/\nIf you see any output, that probably means you already have a public and private SSH key. If you have keys, you will most likely you will have two files, one named id_rsa (that contains your private key) and id_rsa.pub (that contains your public key).\nsidenote: Those files may also be named something like: id_ecdsa.pub or id_ed25519.pub. That just means you’re using a different encryption algorithm to generate your keys. You can learn more about that here if you chose to. Or, don’t worry about it and power on!\nIf you already have keys, continue to step 3. Otherwise, read on!\nStep 2: Create new SSH keys.\nRun the following comamnd, but makes sure to replace your_email@example.com with your own email address. Use the same email address you used to sign up to GitHub with.\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nYou may then see a prompt like the one below. Just hit enter to save the key in the default location.\nEnter file in which to save the key (/Users/jacob/.ssh/id_rsa):\nAfter that, the system will prompt you to enter a passphrase. We’re not going to use a passphrase here, so just go ahead and leave that blank and hit enter twice.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nFinally you should see some randomart that looks like this\nYour identification has been saved in /Users/jacob/.ssh/id_rsa.\nYour public key has been saved in /Users/jacob/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:2AazdvCBP8d1li9tF8cszM2KbtjPe7iwfCK8gUgzIGY your_email@example.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n|       .     o * |\n|  E . = .   . B.*|\n| o . . X o . + =o|\n|      B S o . o =|\n|     o * + +   o.|\n|      . ..o =  . |\n|          o+.=o .|\n|          .ooo=+ |\n+----[SHA256]-----+\nStep 3: Add your key to GitHub\nRun the following command to view your public key\ncat ~/.ssh/id_rsa.pub\nNavigate to https://github.com/settings/keys and hit “New SSH key”. Paste the SSH key from the last command into the text box as shown below and then hit “Add SSH key”. Make sure you copy paste exactly. The key will likely start with ssh_rsa and end with your email address. You can give the key a title like “My Macbook Pro” so you know which computer this key comes from.\n\nStep 4: Verify that it worked!\nRun the following command to test your computer’s SSH connection to GitHub\nssh -T git@github.com\nIf the connection is successful, you will see a message like this\n> Hi username! You've successfully authenticated, but GitHub does not\n> provide shell access.\n\n\n\nRecap: What did we just do?\nWe just created a public/private SSH Key pair. There is now a folder on your computer called .ssh (it is a hidden folder, hidden folders have names that start with .). You can run this command to see the files in that folder.\nls -al ~/.ssh/\nid_rsa.pub contains your public key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa.pub\nid_rsa contains your private key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa\nThis public and private key pair are mathematically linked. As the name suggests, you can share your public key far and wide, but must keep your private key safe and secure. Since you have shared your public key with GitHub, your computer can encrypt files with your private key and send them to GitHub. Since GitHub has your public key, it can match that file and verify that it is coming from you. Your computer can now securely communicate with GitHub without needing a username and password every time."
  },
  {
    "objectID": "setup/mac-setup.html",
    "href": "setup/mac-setup.html",
    "title": "Mac OS Setup",
    "section": "",
    "text": "Part II: Shell\n\nEnsure you are using bash instead of zsh. Newer macOS versions come with zsh as the default. We will switch it back to bash.\n\nCheck if you are on bash by opening the Terminal and run: echo \"$SHELL\". If the result ends with “zsh”, continue to the next step.\nRun brew install bash to get the latest bash.\nRun sudo subl /etc/shells file add /usr/local/bin/bash as the last line of the file.\nRun chsh -s /usr/local/bin/bash to switch the default shell back to bash. It will prompt you for the password which you can type in and press enter.\nRun touch ~/.bash_profile create the bash profile.\nRun subl ~/.bash_profile to open up the bash profile in Sublime Text.\n\nPaste the following snippet at the end of the file and save.\n# add colors\nalias ls='ls -G'\nexport CLICOLOR=1\nexport LSCOLORS=GxFxCxDxBxegedabagaced   \n\n# set EDITOR as sublime text\nexport EDITOR=\"subl --wait\"\n\n# Define a function that returns your current git branch\nparse_git_branch() {\n git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# Display present working directory and git path in bash prompt with colors\nexport PS1=\"\\u \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\nClose and reopen the terminal to see the changes.\n\n\n\nPart III: Git Setup\n\nConfigure git with your name and email address. Be sure to use the same email associated with your Github account.\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\n\n\n\nPart IV: SSH\nIn order to write code locally on our computer and be able to push to GitHub (or pull from GitHub) daily without constantly having to enter a username and password each time, we’re going to set up SSH keys.\n\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access.\nThe cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.\nsource: https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html\n\nThe following steps are a simplification of the steps found in GitHub’s documentation. If you prefer, feel free to follow the steps at that link. Otherwise, for a simplified experience continue on below!\n\nSimplified Setup Steps\n\nStep 1: Check to see if you already have keys.\nRun the following command.\nls -al ~/.ssh/\nIf you see any output, that probably means you already have a public and private SSH key. If you have keys, you will most likely you will have two files, one named id_rsa (that contains your private key) and id_rsa.pub (that contains your public key).\nsidenote: Those files may also be named something like: id_ecdsa.pub or id_ed25519.pub. That just means you’re using a different encryption algorithm to generate your keys. You can learn more about that here if you chose to. Or, don’t worry about it and power on!\nIf you already have keys, continue to step 3. Otherwise, read on!\nStep 2: Create new SSH keys.\nRun the following comamnd, but makes sure to replace your_email@example.com with your own email address. Use the same email address you used to sign up to GitHub with.\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nYou may then see a prompt like the one below. Just hit enter to save the key in the default location.\nEnter file in which to save the key (/Users/jacob/.ssh/id_rsa):\nAfter that, the system will prompt you to enter a passphrase. We’re not going to use a passphrase here, so just go ahead and leave that blank and hit enter twice.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nFinally you should see some randomart that looks like this\nYour identification has been saved in /Users/jacob/.ssh/id_rsa.\nYour public key has been saved in /Users/jacob/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:2AazdvCBP8d1li9tF8cszM2KbtjPe7iwfCK8gUgzIGY your_email@example.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n|       .     o * |\n|  E . = .   . B.*|\n| o . . X o . + =o|\n|      B S o . o =|\n|     o * + +   o.|\n|      . ..o =  . |\n|          o+.=o .|\n|          .ooo=+ |\n+----[SHA256]-----+\nStep 3: Add your key to GitHub\nRun the following command to view your public key\ncat ~/.ssh/id_rsa.pub\nNavigate to https://github.com/settings/keys and hit “New SSH key”. Paste the SSH key from the last command into the text box as shown below and then hit “Add SSH key”. Make sure you copy paste exactly. The key will likely start with ssh_rsa and end with your email address. You can give the key a title like “My Macbook Pro” so you know which computer this key comes from.\n\nStep 4: Verify that it worked!\nRun the following command to test your computer’s SSH connection to GitHub\nssh -T git@github.com\nIf the connection is successful, you will see a message like this\n> Hi username! You've successfully authenticated, but GitHub does not\n> provide shell access.\n\n\n\nRecap: What did we just do?\nWe just created a public/private SSH Key pair. There is now a folder on your computer called .ssh (it is a hidden folder, hidden folders have names that start with .). You can run this command to see the files in that folder.\nls -al ~/.ssh/\nid_rsa.pub contains your public key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa.pub\nid_rsa contains your private key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa\nThis public and private key pair are mathematically linked. As the name suggests, you can share your public key far and wide, but must keep your private key safe and secure. Since you have shared your public key with GitHub, your computer can encrypt files with your private key and send them to GitHub. Since GitHub has your public key, it can match that file and verify that it is coming from you. Your computer can now securely communicate with GitHub without needing a username and password every time."
  },
  {
    "objectID": "setup/windows-setup.html",
    "href": "setup/windows-setup.html",
    "title": "Windows Setup",
    "section": "",
    "text": "Part II: Shell\n\nRun subl ~/.bashrc to open the bash profile in Sublime Text.\nPaste the following snippet at the end of the file and save.\n# set EDITOR as sublime text\nexport EDITOR=\"subl --wait\"\n\n# Define a function that returns your current git branch\nparse_git_branch() {\n git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# Display present working directory and git path in bash prompt with colors\nexport PS1=\"\\u \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\nClose and reopen the terminal to see the changes.\n\n\n\nPart III: Git Setup\n\nConfigure git with your name and email address. Be sure to use the same email associated with your Github account.\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\n\n\n\nPart IV: SSH\nIn order to write code locally on our computer and be able to push to GitHub (or pull from GitHub) daily without constantly having to enter a username and password each time, we’re going to set up SSH keys.\n\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access.\nThe cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.\nsource: https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html\n\nThe following steps are a simplification of the steps found in GitHub’s documentation. If you prefer, feel free to follow the steps at that link. Otherwise, for a simplified experience continue on below!\n\nSimplified Setup Steps\n\nStep 1: Check to see if you already have keys.\nRun the following command.\nls -al ~/.ssh/\nIf you see any output, that probably means you already have a public and private SSH key. If you have keys, you will most likely you will have two files, one named id_rsa (that contains your private key) and id_rsa.pub (that contains your public key).\nsidenote: Those files may also be named something like: id_ecdsa.pub or id_ed25519.pub. That just means you’re using a different encryption algorithm to generate your keys. You can learn more about that here if you chose to. Or, don’t worry about it and power on!\nIf you already have keys, continue to step 3. Otherwise, read on!\nStep 2: Create new SSH keys.\nRun the following comamnd, but makes sure to replace your_email@example.com with your own email address. Use the same email address you used to sign up to GitHub with.\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nYou may then see a prompt like the one below. Just hit enter to save the key in the default location.\nEnter file in which to save the key (/Users/jacob/.ssh/id_rsa):\nAfter that, the system will prompt you to enter a passphrase. We’re not going to use a passphrase here, so just go ahead and leave that blank and hit enter twice.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nFinally you should see some randomart that looks like this\nYour identification has been saved in /Users/jacob/.ssh/id_rsa.\nYour public key has been saved in /Users/jacob/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:2AazdvCBP8d1li9tF8cszM2KbtjPe7iwfCK8gUgzIGY your_email@example.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n|       .     o * |\n|  E . = .   . B.*|\n| o . . X o . + =o|\n|      B S o . o =|\n|     o * + +   o.|\n|      . ..o =  . |\n|          o+.=o .|\n|          .ooo=+ |\n+----[SHA256]-----+\nStep 3: Add your key to GitHub\nRun the following command to view your public key\ncat ~/.ssh/id_rsa.pub\nNavigate to https://github.com/settings/keys and hit “New SSH key”. Paste the SSH key from the last command into the text box as shown below and then hit “Add SSH key”. Make sure you copy paste exactly. The key will likely start with ssh_rsa and end with your email address. You can give the key a title like “My Macbook Pro” so you know which computer this key comes from.\n\nStep 4: Verify that it worked!\nRun the following command to test your computer’s SSH connection to GitHub\nssh -T git@github.com\nIf the connection is successful, you will see a message like this\n> Hi username! You've successfully authenticated, but GitHub does not\n> provide shell access.\n\n\n\nRecap: What did we just do?\nWe just created a public/private SSH Key pair. There is now a folder on your computer called .ssh (it is a hidden folder, hidden folders have names that start with .). You can run this command to see the files in that folder.\nls -al ~/.ssh/\nid_rsa.pub contains your public key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa.pub\nid_rsa contains your private key, you can see what that looks like by running:\ncat ~/.ssh/id_rsa\nThis public and private key pair are mathematically linked. As the name suggests, you can share your public key far and wide, but must keep your private key safe and secure. Since you have shared your public key with GitHub, your computer can encrypt files with your private key and send them to GitHub. Since GitHub has your public key, it can match that file and verify that it is coming from you. Your computer can now securely communicate with GitHub without needing a username and password every time."
  }
]